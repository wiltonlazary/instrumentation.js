{"version":3,"sources":["../src/gulpfile.ts"],"names":[],"mappings":"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","file":"gulpfile.js","sourcesContent":["import * as gulp from 'gulp'\nimport * as watch from 'gulp-watch'\nimport gulpFunction from 'gulp-function'\nimport * as fs from 'fs-extra'\nimport * as globToRegExp from 'glob-to-regexp'\n\nconst ts = require('gulp-typescript')\nconst merge = require('merge2')\nconst filter = require('gulp-filter')\nconst tsProject = ts.createProject('tsconfig.json', {})\nconst sourcemaps = require('gulp-sourcemaps')\nconst src = 'src'\nconst tsPattern = '**/*.{ts,tsx}'\nconst tsPatternRegex = globToRegExp(tsPattern, { extended: true })\nconst copyPattern = '**/*.{js,html}'\nconst copyPatternRegex = globToRegExp(copyPattern, { extended: true })\nconst srcTsPattern = src + '/' + tsPattern\nconst srcCopyPattern = src + '/' + copyPattern\nconst dist = 'dist'\nconst srcTsFilter = filter([srcTsPattern])\nconst srcCopyFilter = filter([srcCopyPattern])\n\nfunction process(vinyl) {\n    if (vinyl.event !== undefined) {\n        switch (vinyl.event) {\n            case 'add':\n            case 'change': {\n                const srctFile = src + '/' + vinyl.relative\n                const stats = fs.lstatSync(srctFile)\n\n                if (stats.isFile() || stats.isSymbolicLink()) {\n                    const dest = dist + '/' + vinyl.relative.substring(0, vinyl.relative.length - vinyl.basename.length)\n\n                    if (tsPatternRegex.test(srctFile)) {\n                        console.log(vinyl.event + ' file => compile: ' + srctFile + ' => ' + dest)\n                        compile(gulp.src(srctFile), dest)\n                    } else if (copyPatternRegex.test(srctFile)) {\n                        console.log(vinyl.event + ' file => copy: ' + srctFile + ' => ' + dest)\n                        copy(gulp.src(srctFile), dest)\n                    } else {\n                        console.log(vinyl.event + ' file => bypass: ' + srctFile + ' => ' + dest)\n                    }\n                }\n            }\n                break\n            case 'unlink': {\n                const destFileBase = dist + '/' + vinyl.relative\n                const destFiles = [destFileBase]\n\n                if (tsPatternRegex.test(destFileBase)) {\n                    const firstPart = destFileBase.substr(0, destFileBase.lastIndexOf('.'))\n                    destFiles.push(firstPart + '.js')\n                    destFiles.push(firstPart + '.js.map')\n                    destFiles.push(firstPart + '.d.ts')\n                }\n\n                destFiles.forEach(destFile => {\n                    if (fs.existsSync(destFile)) {\n                        const stats = fs.lstatSync(destFile)\n\n                        if (stats.isFile() || stats.isSymbolicLink()) {\n                            console.log('remove file: ' + destFile)\n                            fs.unlinkSync(destFile)\n                        } else if (stats.isDirectory()) {\n                            console.log('remove directory: ' + destFile)\n                            fs.removeSync(destFile)\n                        }\n                    }\n                })\n            }\n                break\n        }\n\n    }\n}\n\nfunction copy(gulpSrc, dest) {\n    gulpSrc.pipe(gulp.dest(dest))\n}\n\nfunction compile(gulpSrc, dest) {\n    const tsResult = gulpSrc\n        .pipe(sourcemaps.init())\n        .pipe(tsProject(ts.reporter.defaultReporter()))\n\n    return merge([\n        tsResult.dts\n            .pipe(gulp.dest(dest)),\n\n        tsResult.js\n            .pipe(sourcemaps.write('./'))\n            .pipe(gulp.dest(dest))\n    ])\n}\n\ngulp.task('sanitize', function () {\n    if (!fs.existsSync(dist)) {\n        fs.mkdirsSync(dist)\n    }\n\n    console.log('set dist directory to: ' + dist)\n})\n\ngulp.task('clear', ['sanitize'], function () {\n    const stats = fs.lstatSync(dist)\n\n    if (stats.isDirectory() || stats.isSymbolicLink()) {\n        console.log('clear directory: ' + dist)\n        fs.emptyDirSync(dist)\n    }\n})\n\ngulp.task('copy', function () {\n    copy(gulp.src(srcCopyPattern), dist)\n})\n\ngulp.task('compile', ['sanitize', 'clear', 'copy'], function () {\n    compile(gulp.src(srcTsPattern), dist)\n})\n\ngulp.task('watch', ['sanitize', 'clear', 'copy', 'compile'], function () {\n    gulp.src(src + '/**/*', { base: src })\n        .pipe(watch(src, { base: src, ignoreInitial: true, read: false }, process))\n})\n"]}